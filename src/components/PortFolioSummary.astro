---
import SectionHeader from "./SectionHeader.astro";
import { portfolio } from "@/data/portfolio";
import "photoswipe/style.css";

const uniqueCategories = [
  { key: "all", name: "Todas" },
  ...portfolio.reduce(
    (acc, item) => {
      if (!acc.some((cat) => cat.key === item.category)) {
        acc.push({ key: item.category, name: item.categoryName });
      }
      return acc;
    },
    [] as { key: string; name: string }[]
  ),
];
---

<section class="portfolio-summary">
  <SectionHeader
    title="Portfolio"
    description="Explora una selección de mi mejor trabajo en diferentes estilos y temáticas fotográficas."
  />
  <div class="filters" id="portfolio-filters">
    {
      uniqueCategories.map((category, index) => (
        <button
          class:list={["filter-button", index === 0 ? "default" : "outline"]}
          data-filter={category.key}
        >
          {category.name}
        </button>
      ))
    }
  </div>
  <div class="content grid" id="portfolio-grid">
    {
      portfolio.map((item) => (
        <a
          href={item.url}
          class="portfolio-link"
          data-category={item.category}
          data-cropped="true"
          data-pswp-uid={item.id}
          data-pswp-width={item.width}
          data-pswp-height={item.height}
          data-alt={item.alt}
          data-category-name={item.categoryName}
        >
          <img src={item.url} alt={item.alt} loading="lazy" />
          <div class="caption">
            <p class="alt-text">{item.alt}</p>
            <p class="category-name">{item.categoryName}</p>
          </div>
        </a>
      ))
    }
  </div>
</section>

<style lang="scss">
  .portfolio-summary {
    padding: 5rem 0.875rem;

    @media only screen and (min-width: 1536px) {
      padding: 8rem 0.875rem;
      max-width: var(--container-width);
      margin: 0 auto;
    }
  }

  .filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    justify-content: center;
    margin-bottom: 2rem;
  }

  .filter-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    gap: 0.5rem;
    height: 2rem;
    padding-left: 1rem;
    padding-right: 1rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 500;
    white-space: nowrap;
    border-radius: calc(var(--radius, 0.5rem) - 2px);
    cursor: pointer;
    appearance: button;
    background-image: none;
    text-transform: none;
    transition-property: color, background-color, border-color,
      text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 0.2s;

    @media only screen and (min-width: 1280px) {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
      height: 2.5rem;
    }

    @media only screen and (min-width: 1536px) {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
      height: 2rem;
    }
  }

  .filter-button.default {
    border: none;
    color: hsl(220 13% 8%);
    background-color: rgba(255, 207, 134, 1);
    --tw-ring-offset-color: hsl(var(--background, 0 0% 100%));

    &:hover {
      background-color: rgb(255, 191, 95);
    }
  }

  .filter-button.outline {
    color: rgba(209, 183, 143, var(--tw-text-opacity, 1));
    border: 1px solid rgba(209, 183, 143, var(--tw-border-opacity, 1));
    background-color: transparent;
    transition-duration: 0.25s;
    --tw-ring-offset-color: var(--bg-color);

    &:hover {
      background-color: rgba(56, 49, 39, 0.61);
    }
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;

    @media only screen and (min-width: 1366px) {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  .portfolio-link {
    display: block;
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    aspect-ratio: 1 / 1;
  }

  .portfolio-link.hidden {
    display: none;
  }

  .portfolio-link img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .portfolio-link .caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.75rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
    opacity: 0;
    pointer-events: none;
  }

  .portfolio-link .caption p {
    margin: 0;
    line-height: 1.3;
  }
  .portfolio-link .caption .alt-text {
    font-weight: bold;
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
  }
  .portfolio-link .caption .category-name {
    font-size: 0.8rem;
    opacity: 0.8;
  }

  .portfolio-link:hover img {
    transform: scale(1.05);
  }

  .portfolio-link:hover .caption {
    transform: translateY(0);
    opacity: 1;
    pointer-events: auto;
  }
</style>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import { portfolio } from "@/data/portfolio";
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  declare global {
    interface Window {
      lightbox?: PhotoSwipeLightbox;
    }
  }

  const filterContainer = document.getElementById("portfolio-filters");
  const portfolioGrid = document.getElementById("portfolio-grid");
  const filterButtons = filterContainer?.querySelectorAll(".filter-button");
  const allLinks = portfolioGrid?.querySelectorAll(".portfolio-link");

  function getMaxVisible() {
    if (window.innerWidth <= 1024) {
      return 6;
    } else {
      return 8;
    }
  }

  function updateVisibleItems(filterValue: string | undefined) {
    if (!allLinks) return;
    let shown = 0;
    const maxVisible = getMaxVisible();
    allLinks.forEach((link) => {
      (link as HTMLElement).classList.add("hidden");
    });
    allLinks.forEach((link) => {
      const el = link as HTMLElement;
      const category = el.dataset.category;
      if (
        (filterValue === "all" || category === filterValue) &&
        shown < maxVisible
      ) {
        el.classList.remove("hidden");
        shown++;
      }
    });
  }

  function initPortfolioSummaryAnim() {
    gsap.registerPlugin(ScrollTrigger);

    // Animar el header
    gsap.from(".portfolio-summary > .section-header", {
      opacity: 0,
      y: 80,
      duration: 0.7,
      scrollTrigger: {
        trigger: ".portfolio-summary > .section-header",
        start: "top 80%",
        end: "bottom 90%",
      },
    });

    // Animar los botones de filtro
    gsap.from(".portfolio-summary .filter-button", {
      opacity: 0,
      y: 60,
      duration: 0.4,
      stagger: 0.1,
      scrollTrigger: {
        trigger: ".portfolio-summary .filters",
        start: "top 85%",
        end: "bottom 90%",
      },
    });

    // Animar las imágenes del grid
    gsap.from(".portfolio-summary .portfolio-link", {
      opacity: 0,
      y: 80,
      duration: 0.5,
      stagger: 0.08,
      scrollTrigger: {
        trigger: ".portfolio-summary .grid",
        start: "top 85%",
        end: "bottom 90%",
      },
    });
  }

  if (filterContainer && portfolioGrid && filterButtons && allLinks) {
    filterContainer.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      if (!target.matches(".filter-button")) {
        return;
      }
      const filterValue = target.dataset.filter;
      filterButtons.forEach((button) => {
        (button as HTMLElement).classList.remove("default");
        (button as HTMLElement).classList.add("outline");
      });
      target.classList.remove("outline");
      target.classList.add("default");
      updateVisibleItems(filterValue);
      // Re-inicializar lightbox después de filtrar
      if (window.lightbox) window.lightbox.destroy();
      window.lightbox = new PhotoSwipeLightbox({
        gallery: "#portfolio-grid",
        children: "a:not(.hidden)",
        showHideAnimationType: "fade",
        pswpModule: () => import("photoswipe"),
      });
      window.lightbox.init();
    });
    // Inicializar lightbox para la selección inicial
    window.lightbox = new PhotoSwipeLightbox({
      gallery: "#portfolio-grid",
      children: "a:not(.hidden)",
      showHideAnimationType: "fade",
      pswpModule: () => import("photoswipe"),
    });
    window.lightbox.init();
    // Mostrar solo los primeros 8 al inicio
    updateVisibleItems("all");
  }

  initPortfolioSummaryAnim();
  document.addEventListener(
    "astro:after-swap",
    () => {
      initPortfolioSummaryAnim();
    },
    { once: false }
  );

  window.addEventListener("resize", () => {
    // Reaplicar el filtro actual al cambiar el tamaño de la ventana
    const activeBtn = document.querySelector(
      ".filter-button.default"
    ) as HTMLElement;
    const filterValue = activeBtn?.dataset.filter || "all";
    updateVisibleItems(filterValue);
    if (window.lightbox) window.lightbox.destroy();
    window.lightbox = new PhotoSwipeLightbox({
      gallery: "#portfolio-grid",
      children: "a:not(.hidden)",
      showHideAnimationType: "fade",
      pswpModule: () => import("photoswipe"),
    });
    window.lightbox.init();
  });
</script>
